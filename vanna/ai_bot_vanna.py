import streamlit as st
import vanna
from vanna.remote import VannaDefault
import pandas as pd
import plotly.express as px

# C·∫•u h√¨nh page
st.set_page_config(
    page_title="Vanna AI Demo",
    page_icon="ü§ñ",
    layout="wide"
)

# Kh·ªüi t·∫°o Vanna
@st.cache_resource
def init_vanna():
    try:
        vn = VannaDefault(model='chinook', api_key='ed2715408f2a4de28eac1999d8c7221c')
        vn.connect_to_sqlite('https://vanna.ai/Chinook.sqlite')
        
        # Training c∆° b·∫£n
        training_questions = [
            "Top 5 album b√°n ch·∫°y nh·∫•t?",
            "Doanh thu theo qu·ªëc gia?",
            "Ngh·ªá sƒ© c√≥ nhi·ªÅu b√†i h√°t nh·∫•t?",
            "Th·ªëng k√™ s·ªë l∆∞·ª£ng kh√°ch h√†ng theo qu·ªëc gia"
        ]
        
        return vn
    except Exception as e:
        st.error(f"L·ªói kh·ªüi t·∫°o Vanna: {e}")
        return None

vn = init_vanna()

# Header
st.title("ü§ñ Vanna AI Demo")
st.markdown("H·ªèi c√¢u h·ªèi v·ªÅ database Chinook v√† nh·∫≠n c√¢u tr·∫£ l·ªùi!")

# Sidebar
with st.sidebar:
    st.header("Th√¥ng tin")
    st.info("Database: Chinook SQLite")
    st.info("Model: Vanna Default")
    
    st.header("Ki·ªÉm tra k·∫øt n·ªëi")
    if st.button("Test Connection"):
        try:
            tables = vn.run_sql("SELECT name FROM sqlite_master WHERE type='table';")
            st.success(f"‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! C√≥ {len(tables)} tables.")
            st.dataframe(tables)
        except Exception as e:
            st.error(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")

# Main content
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("H·ªèi c√¢u h·ªèi")
    question = st.text_input(
        "Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:",
        placeholder="V√≠ d·ª•: Top 5 album b√°n ch·∫°y nh·∫•t?"
    )
    
    if st.button("T√¨m c√¢u tr·∫£ l·ªùi") and question:
        if vn is None:
            st.error("Vanna ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch!")
        else:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                try:
                    # Generate SQL
                    sql = vn.generate_sql(question=question)
                    
                    # Run query
                    df = vn.run_sql(sql)
                    
                    # Display results
                    st.subheader("K·∫øt qu·∫£")
                    if not df.empty:
                        st.dataframe(df, use_container_width=True)
                        
                        # T·∫°o bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n
                        if len(df) > 1 and len(df.columns) >= 2:
                            try:
                                # Th·ª≠ t·∫°o bi·ªÉu ƒë·ªì c·ªôt cho 2 c·ªôt ƒë·∫ßu ti√™n
                                if pd.api.types.is_numeric_dtype(df.iloc[:, 1]):
                                    fig = px.bar(df, x=df.columns[0], y=df.columns[1], 
                                                title=f"Bi·ªÉu ƒë·ªì {question}")
                                    st.plotly_chart(fig, use_container_width=True)
                            except Exception as chart_error:
                                st.info("Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì t·ª± ƒë·ªông cho d·ªØ li·ªáu n√†y")
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ")
                    
                    # Display SQL
                    with st.expander("Xem SQL query"):
                        st.code(sql, language="sql")
                        
                except Exception as e:
                    st.error(f"L·ªói: {e}")
                    st.info("üí° Th·ª≠ h·ªèi c√¢u h·ªèi kh√°c ho·∫∑c ki·ªÉm tra c·∫•u h√¨nh")

with col2:
    st.subheader("C√¢u h·ªèi m·∫´u")
    sample_questions = [
        "Top 5 album b√°n ch·∫°y nh·∫•t?",
        "Doanh thu theo qu·ªëc gia?",
        "Ngh·ªá sƒ© c√≥ nhi·ªÅu b√†i h√°t nh·∫•t?",
        "Th·ªëng k√™ s·ªë l∆∞·ª£ng kh√°ch h√†ng theo qu·ªëc gia",
        "B√†i h√°t d√†i nh·∫•t c·ªßa m·ªói ngh·ªá sƒ©?",
        "Doanh thu theo nƒÉm?"
    ]
    
    for q in sample_questions:
        if st.button(q, key=q):
            # Set question to input
            st.session_state.question_input = q
    
    # X·ª≠ l√Ω khi ch·ªçn c√¢u h·ªèi m·∫´u
    if 'question_input' in st.session_state:
        question = st.session_state.question_input
        # T·ª± ƒë·ªông trigger t√¨m ki·∫øm
        if vn is not None:
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                try:
                    sql = vn.generate_sql(question=question)
                    df = vn.run_sql(sql)
                    
                    st.subheader("K·∫øt qu·∫£")
                    if not df.empty:
                        st.dataframe(df, use_container_width=True)
                        
                        # Display SQL
                        with st.expander("Xem SQL query"):
                            st.code(sql, language="sql")
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ")
                        
                except Exception as e:
                    st.error(f"L·ªói: {e}")

# Footer
st.markdown("---")
st.markdown("**Vanna AI Demo** - S·ª≠ d·ª•ng Chinook SQLite Database")